CPSC 2310 Spring 22
Lab 12 Questions

1. As discussed in the lab writeup, the locations for min and max are 
	-8(%rbq) and -4(%rbq), which are 4 apart. How far apart would these
	addresses be if min and max were chars instead of ints? Why?
	What if they were doubles? 
	(You can test this)

		If these were chars, since chars are 1 byte each, these addresses would be 1 
		byte apart instead of 4. If these were doubles, then they would be 8 bytes apart
		because doubles use a quad word.


2. Alter the values assigned to min and max in the driver.s file
	| min | max | result
	=======================
	| 0   | 10  | 0 1 2 3 4 5 6 7 8 9 10
	| 5   | 10  | 5 6 7 8 9 10
	| 10  | 0   | 
	| -5  | 1   | -5 -4 -3 -2 -1 0 1


	
3. What are these lines doing in driver.s?

	movl  -8(%rbp), %eax # min, tmp89
   	movl  %eax, -12(%rbp)   # tmp89, i


		They are placing the value of min into a temporary register
		and then placing that value from register into i.


4. What happens when you change the jump conditional to jl instead of jle?
	What if you change it to jg? Why?


		This changes the conditions of the loop. If changed to jl, it would be
		if i < max instead of <=. This would decreased the loop by 1. Changing it
		to jg would be i > max and would not loop at all.


5. The last line in .L3 handles the for loop change (i++)
   The third line in .L2  handles the for loop conditional (i < max)
(The first two lines in .L2 handle the initialization, but we won't alter that)
	
Fill in the resulting loop and print out when we change the x86 commands 
(*some of these create infinite loops so testing directly may take awhile, 
try to logic through it first. If there is an infinite loop, write "infinite
loop" as the printout)

	.L3         | .L2  |        for loop             |    printout
===========================================================================
addl  $1, -12(%rbp) | jle  | for(i = min; i <= max; i++) | 0 1 3 4....10
subl  $1, -12(%rbp) | jle  | for(i = min; i <= max; i--) | 0 -1 -2 -3 ..... -1E99 Infinite Loop
addl  $2, -12(%rbp) | jl   | for(i = min; i < max ; i++) | 0 2 4 6 8
mull  $2, -12(%rbp) | jge  | for(i = min; i >= max; i *= 2) | 
addl  $1, -8(%rbp)  | jle  | for(i = min; i <= max; min++) | 0 0 0 0 0 0 ...... 0 0 0 Infinite Loop


6. lsl r4, r3, #2 is the same as r4 = 4 * r3. Explain


	lsl gives the value for a register multiplied by a power of 2 with #2 in this case
	meaning 2 zeroes inserted. Therefore is would be 2 to the power of 2, or 4. So it is 
	r4 becoming r3 time 2 to the power of 2.

   ldr r5, [r0, r4] is the same as r5 = arr[i] in this case. How does this work

	ldr loads a stored piece of information from memory into a specific target position.
	So here, it is taking what is in r4, in this case the value at the current position r0,
	int the array r4 into r5.

7. In the beginning of a function in ARM, we push lr onto the stack. At the
   end, we pop that value into pc. Why is this important? What does it 
   accomplish?	

	It is important to keep track of the address to return the value. So at the beginning we 
	push lr, or the address onto the stack and then pop it later to the pc keep track of it
